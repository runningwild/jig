syntax = "proto3";

package jig;


message Repo {
	repeated Commit commits = 1;
	repeated Edge edges = 2;
	repeated Node nodes = 3;
	repeated bytes contents = 4;
	repeated Ref refs = 5;
}

message Ref {
	string src = 1;
	string dst = 2;
}

// Node contains POD.  All of the edge data is embedded so that they can be split when necessary.
// When a Node splits, we get two nodes whose Form, Content, and Count are determined in the obvious
// way.  The first in the pair gets the In edges and an Out edge to the second in the pair, the last
// gets the Out edges and an In edge to the first in the pair.
message Node {
	// Head is the hash of the first true node in this Node.  Whenever this Node is split, the head
	// hash will never change.
	string head = 1;
	
	// Tail is the hash of the last true node in this Node.  If Count == 1 it will always equal
	// Head, otherwise any time this Node is split, the second Node created will implicitly
	// inherit the value of Tail prior to the split.
	string tail = 2;

	oneof content {
		Src src = 3;
		Snk snk = 4;
		string content_hash = 5;
	}
	//Form form = 3;

	// Hash of the content, not the content itself.
	//string content = 4;

	// Number of internal nodes represented by this Node.
	int32 count = 6;

	repeated Edge in = 7;
	repeated Edge out = 8;
}

message Edge {
	string commit = 1;

	// There are two special values for output node hashes.
	// If this edge is coming from a file node:
	// "0": The file has been deleted
	// If this edge is coming from an internal node:
	// "1": This is the end of the file.
	string node = 2;

	// Join indicates that an edge continues through a node.  If the In and Out edges from a commit
	// are Join Edges then it is as though there is an edge from this commit between each adjacent
	// pair of nodes within the greater Node.
	bool join = 3;
}

message Commit {
	repeated string deps = 1;
	repeated EdgeRef edge_refs = 2;
}

message EdgeRef {
	NodeRef src = 1;
	NodeRef dst = 2;

	// Content inserted between Src and Dst.  This can be nil, in which case the edge created by
	// this EdgeRef connects Src directly to Dst.
	repeated bytes chunks = 3;
}

message Src {}
message Snk {}

message NodeRef {
	// Typical hash of the node that this NodeRef refers to.  This may also refer to nodes that are
	// created by this commit.
	string node = 1;

	// Depth indicates how many nodes should be used before inserting the edge in question.  For
	// example, if there are nodes connected like A -> B -> C and a src node specifies node A with
	// depth 2, that refers to an outgoing edge B, but a dst node that specifies node A with depth 2
	// is referring to an incoming edge into C.  Because of this a src node must specify Depth >= 1,
	// a dst node must specify Depth >= 0.
	int32 depth = 2;

	bool join = 3;
}

// Useful for storing to disk and pretty much nothing else
message StoredContent {
	repeated bytes content = 1;
}

//
//type Repo interface {
//	GetRef(ptr string) string
//	GetNode(nodeHash string) *Node
//	GetContent(contentHash string) [][]byte
//	GetCommit(commitHash string) *Commit
//
//	// List methods all fill out the given slice with as many hashes as possible of the specified,
//	// it returns the number of elements filled.
//	ListRefs(start string, refs []string) (n int)
//	ListNodes(start string, nodes []string) (n int)
//	ListContents(start string, contents []string) (n int)
//	ListCommits(start string, commits []string) (n int)
//
//	StartTransaction()
//	EndTransaction() error
//	PutRef(ptr, val string)
//	PutNode(n *Node)
//	PutCommit(c *Commit)
//	DeleteNode(nodeHash string)
//
//	// TODO: Need to decide how to handle multiple references to a single content.  GC or reference counting?
//	PutContent(content [][]byte) string
//	DeleteContent(contentHash string)
//}
//