// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/runningwild/jig/proto/jig.proto

/*
Package jig is a generated protocol buffer package.

It is generated from these files:
	github.com/runningwild/jig/proto/jig.proto

It has these top-level messages:
	Repo
	Ref
	Node
	Edge
	Commit
	EdgeRef
	Src
	Snk
	NodeRef
	StoredContent
*/
package jig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Repo struct {
	Commits  []*Commit `protobuf:"bytes,1,rep,name=commits" json:"commits,omitempty"`
	Edges    []*Edge   `protobuf:"bytes,2,rep,name=edges" json:"edges,omitempty"`
	Nodes    []*Node   `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
	Contents [][]byte  `protobuf:"bytes,4,rep,name=contents,proto3" json:"contents,omitempty"`
	Refs     []*Ref    `protobuf:"bytes,5,rep,name=refs" json:"refs,omitempty"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Repo) GetCommits() []*Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *Repo) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *Repo) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Repo) GetContents() [][]byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *Repo) GetRefs() []*Ref {
	if m != nil {
		return m.Refs
	}
	return nil
}

type Ref struct {
	Src string `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dst string `protobuf:"bytes,2,opt,name=dst" json:"dst,omitempty"`
}

func (m *Ref) Reset()                    { *m = Ref{} }
func (m *Ref) String() string            { return proto.CompactTextString(m) }
func (*Ref) ProtoMessage()               {}
func (*Ref) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ref) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *Ref) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

// Node contains POD.  All of the edge data is embedded so that they can be split when necessary.
// When a Node splits, we get two nodes whose Form, Content, and Count are determined in the obvious
// way.  The first in the pair gets the In edges and an Out edge to the second in the pair, the last
// gets the Out edges and an In edge to the first in the pair.
type Node struct {
	// Head is the hash of the first true node in this Node.  Whenever this Node is split, the head
	// hash will never change.
	Head string `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	// Tail is the hash of the last true node in this Node.  If Count == 1 it will always equal
	// Head, otherwise any time this Node is split, the second Node created will implicitly
	// inherit the value of Tail prior to the split.
	Tail string `protobuf:"bytes,2,opt,name=tail" json:"tail,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Node_Src
	//	*Node_Snk
	//	*Node_ContentHash
	Content isNode_Content `protobuf_oneof:"content"`
	// Number of internal nodes represented by this Node.
	Count int32   `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	In    []*Edge `protobuf:"bytes,7,rep,name=in" json:"in,omitempty"`
	Out   []*Edge `protobuf:"bytes,8,rep,name=out" json:"out,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isNode_Content interface {
	isNode_Content()
}

type Node_Src struct {
	Src *Src `protobuf:"bytes,3,opt,name=src,oneof"`
}
type Node_Snk struct {
	Snk *Snk `protobuf:"bytes,4,opt,name=snk,oneof"`
}
type Node_ContentHash struct {
	ContentHash string `protobuf:"bytes,5,opt,name=content_hash,oneof"`
}

func (*Node_Src) isNode_Content()         {}
func (*Node_Snk) isNode_Content()         {}
func (*Node_ContentHash) isNode_Content() {}

func (m *Node) GetContent() isNode_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Node) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *Node) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *Node) GetSrc() *Src {
	if x, ok := m.GetContent().(*Node_Src); ok {
		return x.Src
	}
	return nil
}

func (m *Node) GetSnk() *Snk {
	if x, ok := m.GetContent().(*Node_Snk); ok {
		return x.Snk
	}
	return nil
}

func (m *Node) GetContentHash() string {
	if x, ok := m.GetContent().(*Node_ContentHash); ok {
		return x.ContentHash
	}
	return ""
}

func (m *Node) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Node) GetIn() []*Edge {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Node) GetOut() []*Edge {
	if m != nil {
		return m.Out
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Node_OneofMarshaler, _Node_OneofUnmarshaler, _Node_OneofSizer, []interface{}{
		(*Node_Src)(nil),
		(*Node_Snk)(nil),
		(*Node_ContentHash)(nil),
	}
}

func _Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Node)
	// content
	switch x := m.Content.(type) {
	case *Node_Src:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Src); err != nil {
			return err
		}
	case *Node_Snk:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Snk); err != nil {
			return err
		}
	case *Node_ContentHash:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ContentHash)
	case nil:
	default:
		return fmt.Errorf("Node.Content has unexpected type %T", x)
	}
	return nil
}

func _Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Node)
	switch tag {
	case 3: // content.src
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Src)
		err := b.DecodeMessage(msg)
		m.Content = &Node_Src{msg}
		return true, err
	case 4: // content.snk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Snk)
		err := b.DecodeMessage(msg)
		m.Content = &Node_Snk{msg}
		return true, err
	case 5: // content.content_hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Content = &Node_ContentHash{x}
		return true, err
	default:
		return false, nil
	}
}

func _Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Node)
	// content
	switch x := m.Content.(type) {
	case *Node_Src:
		s := proto.Size(x.Src)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Snk:
		s := proto.Size(x.Snk)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_ContentHash:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ContentHash)))
		n += len(x.ContentHash)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Edge struct {
	Commit string `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	// There are two special values for output node hashes.
	// If this edge is coming from a file node:
	// "0": The file has been deleted
	// If this edge is coming from an internal node:
	// "1": This is the end of the file.
	Node string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	// Join indicates that an edge continues through a node.  If the In and Out edges from a commit
	// are Join Edges then it is as though there is an edge from this commit between each adjacent
	// pair of nodes within the greater Node.
	Join bool `protobuf:"varint,3,opt,name=join" json:"join,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Edge) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Edge) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Edge) GetJoin() bool {
	if m != nil {
		return m.Join
	}
	return false
}

type Commit struct {
	Deps     []string   `protobuf:"bytes,1,rep,name=deps" json:"deps,omitempty"`
	EdgeRefs []*EdgeRef `protobuf:"bytes,2,rep,name=edge_refs" json:"edge_refs,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Commit) GetDeps() []string {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *Commit) GetEdgeRefs() []*EdgeRef {
	if m != nil {
		return m.EdgeRefs
	}
	return nil
}

type EdgeRef struct {
	Src *NodeRef `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dst *NodeRef `protobuf:"bytes,2,opt,name=dst" json:"dst,omitempty"`
	// Content inserted between Src and Dst.  This can be nil, in which case the edge created by
	// this EdgeRef connects Src directly to Dst.
	Chunks [][]byte `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (m *EdgeRef) Reset()                    { *m = EdgeRef{} }
func (m *EdgeRef) String() string            { return proto.CompactTextString(m) }
func (*EdgeRef) ProtoMessage()               {}
func (*EdgeRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EdgeRef) GetSrc() *NodeRef {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *EdgeRef) GetDst() *NodeRef {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *EdgeRef) GetChunks() [][]byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type Src struct {
}

func (m *Src) Reset()                    { *m = Src{} }
func (m *Src) String() string            { return proto.CompactTextString(m) }
func (*Src) ProtoMessage()               {}
func (*Src) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Snk struct {
}

func (m *Snk) Reset()                    { *m = Snk{} }
func (m *Snk) String() string            { return proto.CompactTextString(m) }
func (*Snk) ProtoMessage()               {}
func (*Snk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type NodeRef struct {
	// Typical hash of the node that this NodeRef refers to.  This may also refer to nodes that are
	// created by this commit.
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	// Depth indicates how many nodes should be used before inserting the edge in question.  For
	// example, if there are nodes connected like A -> B -> C and a src node specifies node A with
	// depth 2, that refers to an outgoing edge B, but a dst node that specifies node A with depth 2
	// is referring to an incoming edge into C.  Because of this a src node must specify Depth >= 1,
	// a dst node must specify Depth >= 0.
	Depth int32 `protobuf:"varint,2,opt,name=depth" json:"depth,omitempty"`
	Join  bool  `protobuf:"varint,3,opt,name=join" json:"join,omitempty"`
}

func (m *NodeRef) Reset()                    { *m = NodeRef{} }
func (m *NodeRef) String() string            { return proto.CompactTextString(m) }
func (*NodeRef) ProtoMessage()               {}
func (*NodeRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NodeRef) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *NodeRef) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *NodeRef) GetJoin() bool {
	if m != nil {
		return m.Join
	}
	return false
}

// Useful for storing to disk and pretty much nothing else
type StoredContent struct {
	Content [][]byte `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (m *StoredContent) Reset()                    { *m = StoredContent{} }
func (m *StoredContent) String() string            { return proto.CompactTextString(m) }
func (*StoredContent) ProtoMessage()               {}
func (*StoredContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StoredContent) GetContent() [][]byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Repo)(nil), "jig.Repo")
	proto.RegisterType((*Ref)(nil), "jig.Ref")
	proto.RegisterType((*Node)(nil), "jig.Node")
	proto.RegisterType((*Edge)(nil), "jig.Edge")
	proto.RegisterType((*Commit)(nil), "jig.Commit")
	proto.RegisterType((*EdgeRef)(nil), "jig.EdgeRef")
	proto.RegisterType((*Src)(nil), "jig.Src")
	proto.RegisterType((*Snk)(nil), "jig.Snk")
	proto.RegisterType((*NodeRef)(nil), "jig.NodeRef")
	proto.RegisterType((*StoredContent)(nil), "jig.StoredContent")
}

func init() { proto.RegisterFile("github.com/runningwild/jig/proto/jig.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xc1, 0x8e, 0xda, 0x30,
	0x10, 0x86, 0x09, 0xb6, 0x81, 0x0c, 0xa6, 0xad, 0x2c, 0x95, 0xba, 0x52, 0xa5, 0x8d, 0x72, 0x42,
	0x3d, 0x80, 0xb4, 0xad, 0xd4, 0x7b, 0x57, 0x95, 0x38, 0xb5, 0x12, 0x3c, 0xc0, 0x8a, 0x8d, 0x4d,
	0x62, 0x58, 0x6c, 0x14, 0x3b, 0xea, 0xbd, 0xef, 0xd4, 0xf7, 0x5b, 0x79, 0x1c, 0xd8, 0x15, 0xa7,
	0x8c, 0xfd, 0xff, 0x99, 0xfc, 0xf3, 0x4d, 0xe0, 0x6b, 0x6d, 0x42, 0xd3, 0x3d, 0x2d, 0x2b, 0x77,
	0x5a, 0xb5, 0x9d, 0xb5, 0xc6, 0xd6, 0x7f, 0xcd, 0xb3, 0x5a, 0x1d, 0x4c, 0xbd, 0x3a, 0xb7, 0x2e,
	0xb8, 0x58, 0x2d, 0xb1, 0x12, 0xe4, 0x60, 0xea, 0xf2, 0x5f, 0x06, 0x74, 0xa3, 0xcf, 0x4e, 0x7c,
	0x81, 0x71, 0xe5, 0x4e, 0x27, 0x13, 0xbc, 0xcc, 0x0a, 0xb2, 0x98, 0xde, 0x4f, 0x97, 0xd1, 0xfa,
	0x80, 0x77, 0x42, 0x02, 0xd3, 0xaa, 0xd6, 0x5e, 0x0e, 0x51, 0xcb, 0x51, 0xfb, 0xa5, 0x6a, 0x1d,
	0x15, 0xeb, 0x94, 0xf6, 0x92, 0xbc, 0x51, 0x7e, 0x3b, 0xa5, 0xc5, 0x07, 0x98, 0x54, 0xce, 0x06,
	0x6d, 0x83, 0x97, 0xb4, 0x20, 0x0b, 0x2e, 0xe6, 0x40, 0x5b, 0xbd, 0xf7, 0x92, 0xa1, 0x75, 0x82,
	0xd6, 0x8d, 0xde, 0x97, 0x77, 0x40, 0x36, 0x7a, 0x2f, 0xa6, 0x40, 0x7c, 0x5b, 0xc9, 0xac, 0xc8,
	0x16, 0x79, 0x3c, 0x28, 0x1f, 0xe4, 0x30, 0x1e, 0xca, 0xff, 0x19, 0x50, 0xec, 0xc9, 0x81, 0x36,
	0x7a, 0xa7, 0x7a, 0x0f, 0x07, 0x1a, 0x76, 0xe6, 0x39, 0x99, 0xc4, 0xa7, 0xf4, 0x3a, 0x29, 0xb2,
	0x6b, 0xf3, 0x6d, 0x5b, 0xad, 0x07, 0x28, 0xd8, 0xa3, 0xa4, 0x6f, 0x05, 0x7b, 0x5c, 0x0f, 0xc4,
	0x1c, 0x78, 0x9f, 0xf0, 0xb1, 0xd9, 0xf9, 0x46, 0xb2, 0xd8, 0x67, 0x3d, 0x10, 0x33, 0x60, 0x95,
	0xeb, 0x6c, 0x90, 0xa3, 0x22, 0x5b, 0x30, 0xf1, 0x11, 0x86, 0xc6, 0xca, 0xf1, 0xed, 0xe4, 0x73,
	0x20, 0xae, 0x0b, 0x72, 0x72, 0x73, 0xff, 0x33, 0x8f, 0x24, 0xb1, 0x6b, 0x79, 0x0f, 0x14, 0xad,
	0xef, 0x60, 0x94, 0xe0, 0xbe, 0x06, 0x8f, 0xd0, 0xfa, 0xe0, 0x1c, 0xe8, 0xc1, 0x19, 0x8b, 0xc9,
	0x27, 0xe5, 0x0f, 0x18, 0xf5, 0xd0, 0x39, 0x50, 0xa5, 0xcf, 0x69, 0x1f, 0xb9, 0xb8, 0x83, 0x3c,
	0xae, 0xe0, 0x11, 0x09, 0xa6, 0x35, 0xf0, 0xeb, 0x47, 0x23, 0xc5, 0x3f, 0x30, 0xee, 0x4b, 0xf1,
	0xf9, 0x95, 0xe4, 0xc5, 0x15, 0xf1, 0xf5, 0xd2, 0x85, 0xeb, 0xad, 0x14, 0x53, 0x36, 0x9d, 0x3d,
	0xa6, 0x5d, 0xf2, 0x92, 0x01, 0xd9, 0xb6, 0x15, 0x3e, 0xec, 0xb1, 0xfc, 0x0e, 0xe3, 0x8b, 0xf1,
	0x12, 0x3f, 0x0d, 0x33, 0x03, 0xa6, 0xf4, 0x39, 0x34, 0xd8, 0x93, 0xdd, 0x4c, 0x53, 0xc0, 0x6c,
	0x1b, 0x5c, 0xab, 0xd5, 0x43, 0x42, 0x22, 0xde, 0x5f, 0xe9, 0xe0, 0x5c, 0xfc, 0x69, 0x84, 0x7f,
	0xe3, 0xb7, 0x97, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x72, 0x7b, 0x4a, 0xbb, 0x02, 0x00, 0x00,
}
